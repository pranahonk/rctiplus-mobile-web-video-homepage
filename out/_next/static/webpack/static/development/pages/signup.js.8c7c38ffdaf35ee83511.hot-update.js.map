{"version":3,"file":"static/webpack/static/development/pages/signup.js.8c7c38ffdaf35ee83511.hot-update.js","sources":["webpack:///./redux/actions/userActions.js"],"sourcesContent":["import ax from 'axios';\nimport { API, DEV_API, VISITOR_TOKEN } from '../../config';\nimport { getCookie } from '../../utils/cookie';\n\nconst tokenKey = 'ACCESS_TOKEN';\nconst accessToken = getCookie(tokenKey);\n\nconst axios = ax.create({\n    // baseURL: API + '/api',\n    baseURL: DEV_API + '/api',\n    headers: {\n        'Authorization': accessToken == undefined ? VISITOR_TOKEN : accessToken\n    }\n});\n\nconst updateUserProfile = (username, dob, gender, location) => {\n    return dispatch => new Promise(async (resolve, reject) => {\n        try {\n            const response = await axios.post(`/v1/user`, {\n                username: username,\n                dob: dob,\n                gender: gender,\n                location: location\n            }, {\n                headers: {\n                    'Authorization': accessToken,\n                    'Content-Type': 'application/json'\n                }\n            });\n\n            if (response.data.status.code === 0) {\n                dispatch({ type: 'UPDATE_PROFILE', status: response.data.status });\n                resolve(response);\n            }\n            else {\n                reject(response);\n            }\n        }\n        catch (error) {\n            reject(error);\n        }\n    });\n};\n\nconst getUserData = () => {\n    return dispatch => new Promise(async (resolve, reject) => {\n        try {\n            const response = await axios.get(`/v1/user`, {\n                headers: {\n                    'Authorization': accessToken\n                }\n            });\n\n            if (response.data.status.code === 0) {\n                dispatch({\n                    type: 'USER_DATA',\n                    data: response.data.data,\n                    meta: response.data.meta\n                });\n                resolve(response);\n            }\n            else {\n                reject(response);\n            }\n        }\n        catch (error) {\n            reject(error);\n        }\n    });\n}\n\nconst getInterests = (status = 'active') => {\n    return dispatch => new Promise(async (resolve, reject) => {\n        try {\n            const response = await axios.get(`/v1/genre?status=${status}`);\n            if (response.data.status.code === 0) {\n                dispatch({\n                    type: 'INTERESTS',\n                    data: response.data.data,\n                    meta: response.data.meta,\n                    status: response.data.status\n                });\n                resolve(response);\n            }\n            else {\n                reject(response);\n            }\n        }\n        catch (error) {\n            reject(error);\n        }\n    });\n};\n\nconst setInterest = interests => {\n    return dispatch => new Promise(async (resolve, reject) => {\n        try {\n            const response = await axios.post(`/v2/interest`, {\n                interest: interests\n            });\n            resolve(response);\n        }\n        catch (error) {\n            reject(error);\n        }\n    });\n};\n\nconst checkUser = username => {\n    return dispatch => new Promise(async (resolve, reject) => {\n        try {\n            const response = await axios.get(`/v2/user/exist?username=${username}`);\n            dispatch({ type: 'CHECK_USER', status: response.data.status });\n            resolve(response);\n        }\n        catch (error) {\n            reject(error);\n        }\n    });\n};\n\nexport default {\n    updateUserProfile,\n    getUserData,\n    getInterests,\n    checkUser,\n    setInterest\n};"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AAHA;AACA;AAOA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAFA;AADA;AACA;AARA;AAEA;AACA;AAWA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AArBA;AAAA;AACA;AADA;AAAA;AAAA;AAuBA;AACA;AAxBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AA0BA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AADA;AADA;AACA;AAHA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAEA;AACA;AACA;AAnBA;AAAA;AACA;AADA;AAAA;AAAA;AAqBA;AACA;AAtBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAwBA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAEA;AACA;AACA;AAfA;AAAA;AACA;AADA;AAAA;AAAA;AAiBA;AACA;AAlBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAosourceRoot":""}